package com.smart.mango.web.inside.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.smart.mango.common.bean.PagingBean;
import com.smart.mango.common.service.IPagingService;
import com.smart.mango.web.common.service.ICommonService;
import com.smart.mango.web.inside.service.ILeadService;

@Controller
public class LeadController {
	@Autowired
	public ILeadService iLeadService;

	@Autowired
	public IPagingService iPagingService;

	@Autowired
	public ICommonService iCommonService;

	@RequestMapping(value = "/leadList")
	public ModelAndView leadList(@RequestParam HashMap<String,String> params, HttpSession session, ModelAndView mav) {
		System.out.println(params);		
				
		mav.setViewName("Lead/leadList");
		return mav;
	}

	@RequestMapping(value = "/leadReg")
	public ModelAndView leadReg(HttpSession session, ModelAndView mav) {
		mav.setViewName("Lead/leadReg");

		return mav;
	}
	@RequestMapping(value = "leadRegAjax", method = RequestMethod.POST, produces = "text/json;charset=UTF-8") // 형태지정
	@ResponseBody
	public String leadRegAjax(@RequestParam HashMap<String, String> params, 
							ModelAndView modelAndView) throws Throwable {

		ObjectMapper mapper = new ObjectMapper();
		Map<String, Object> modelMap = new HashMap<String, Object>();
		
		try {
			System.out.println(params);
			iLeadService.insertLead(params);
			
			modelMap.put("res", "SUCCESS");
		} catch (Exception e) {
			e.printStackTrace();
			
			modelMap.put("res", "FAILED");
		}
		
		return mapper.writeValueAsString(modelMap);
	}
	@RequestMapping(value = "/leadCardView")
	public ModelAndView leadCardView(HttpSession session, ModelAndView mav) {
		mav.setViewName("Lead/leadCardView");

		return mav;
	}

	@RequestMapping(value = "leadListAjax", method = RequestMethod.POST, produces = "text/json;charset=UTF-8")
	@ResponseBody
	public String leadListAjax(@RequestParam HashMap<String, String> params, ModelAndView modelAndView)
			throws Throwable {

		ObjectMapper mapper = new ObjectMapper();
		Map<String, Object> modelMap = new HashMap<String, Object>();

		
		int cnt = iLeadService.getleadCnt(params);
		
		PagingBean pb = iPagingService.getPagingBean(Integer.parseInt(params.get("page")), cnt, 10, 5);
		
		params.put("startCnt", Integer.toString(pb.getStartCount()));
		params.put("endCnt", Integer.toString(pb.getEndCount()));
		

		List<HashMap<String, String>> list = iLeadService.getLeadlist(params);
		
		
		modelMap.put("list", list);
		modelMap.put("pb", pb);

		return mapper.writeValueAsString(modelMap);
	}

	@RequestMapping(value = "leadpopAjax", method = RequestMethod.POST, produces = "text/json;charset=UTF-8")
	@ResponseBody
	public String leadpopAjax(@RequestParam HashMap<String, String> params, ModelAndView modelAndView)
			throws Throwable {
		
		ObjectMapper mapper = new ObjectMapper();
		Map<String, Object> modelMap = new HashMap<String, Object>();

		 int cnt = iLeadService.getpopCnt(params);
		 PagingBean pb =iPagingService.getPagingBean(Integer.parseInt(params.get("page")), cnt, 7,5);
		 params.put("startCnt", Integer.toString(pb.getStartCount()));
		 params.put("endCnt", Integer.toString(pb.getEndCount()));

		List<HashMap<String, String>> pop = iLeadService.getclientList(params);
		
		modelMap.put("pop", pop);
		modelMap.put("pb", pb);

		return mapper.writeValueAsString(modelMap);
	}
	
	@RequestMapping(value = "editAjax", method = RequestMethod.POST, produces = "text/json;charset=UTF-8")
	@ResponseBody
	public String editAjax(@RequestParam HashMap<String, String> params, ModelAndView modelAndView)
			throws Throwable {

		ObjectMapper mapper = new ObjectMapper();
		Map<String, Object> modelMap = new HashMap<String, Object>();

		try {
			iLeadService.editLs(params);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return mapper.writeValueAsString(modelMap);
	}
	
	@RequestMapping(value = "/leadDetail")
	public ModelAndView leadDetail(HttpSession session, ModelAndView mav, @RequestParam HashMap<String, String> params) throws Throwable {
		HashMap<String, String> data = iLeadService.getLeadData(params);
		System.out.println(String.valueOf(data.get("COMP_ZC")));
		if(!String.valueOf(data.get("COMP_ZC")).equals("null") && !String.valueOf(data.get("COMP_ADDR")).equals("null")) {
			data.put("COMP_ADDR", "(" + data.get("COMP_ZC") + ")  " + data.get("COMP_ADDR"));
			if(!String.valueOf(data.get("COMP_DETAIL_ADDR")).equals("null")){
				data.put("COMP_ADDR", data.get("COMP_ADDR")+ ", " +data.get("COMP_DETAIL_ADDR"));
			}
		}
		mav.addObject("data", data);
		mav.setViewName("Lead/leadDetail");
		
		return mav;
	}
	
	
	
}
